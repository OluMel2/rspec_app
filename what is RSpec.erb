<!--RSpecとは何-->
<!--
RSpecとは、Railsで用いられることが多いテストツールであり、Gemでinstallすることが可能なため、導入も簡単です。
Railsにはデフォルトでテストの機能が備わっています。
コードが読みやすく、ドキュメントも豊富なため今回はRSpecを使用しています。
また、Railsで開発を行う現場でもRSpecを使用していることが多いです。
-->


<!--Webアプリケーションのテストとは何か-->

<!--一般的にテストとして出てくるものとして「単体テスト」と「結合テスト」が存在しますので、これらを取り上げて解説します。-->


<!--単体テスト-->
<!--単体テストとはクラスやメソッド（関数）といった単位でのテストになります。

以下のようなテストが単体テストとなります。

空白チェック
文字列チェック
数値チェック
など
一つ例として挙げると、空白であるかをチェックするといったメソッドはバリデーションチェックに用いられることが多いです。-->

<!--結合テスト-->
<!--単体テストがクラスやメソッド（関数）といった単位でのテストに比べて、結合テストでは単体テストの組み合わせで期待とする動作が行えているかをテストします。

一つ例として挙げると、「フォームに値を入力して、送信ボタンを押すと値が保存される」といったものです。-->


<!--テストを行う理由-->
<!--テストを行う理由には単にバグを見つけやすくするというだけではなく、機能要件に沿って開発ができているかという指針にもなります。
要件を満たしているという保証性やリリース後の品質リスクを考える上でも大変重要なことです。
テストを行わずにアプリケーションをリリースするといったことは、まず、ありえません。

現場によっては機能要件からテストを先に記述して、テスト要件を満たすように実装とリファクタリングをするテスト駆動開発（TDD = Test Driven Development）といった開発手法もあります。-->



<!--RSpecの構成-->
<!--四則演算のテストの例を見ながら学んでいきます。
まず、RSpecを使用する上で、コードの中で使用されるものを大まかに確認します。

describe（テストの大きなくくりを示します：必須）
context（describeより詳細に分ける場合にのみ使用します）
it（具体的なテストの内容を示します：必須）
before（itの内容を実行する前に必要であれば使用します）


describe '四則演算' do
  context '足し算' do
    it '1 + 1 は 2 になる' do
      expect(1 + 1).to eq 2
    end
  end
  context '足し算' do
    it '3 + 2 は 5 になる' do
      expect(3 + 2).to eq 5
    end
  end
  context '引き算' do
    it '3 - 1 は 2 になる' do
      expect(3 - 1).to eq 2
    end
  end
  context '引き算' do
    it '5 - 2 は 3 になる' do
      expect(5 - 2).to eq 3
    end
  end
end


